#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AspSampleProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DB_Lab")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTestTransactionDet(TestTransactionDet instance);
    partial void UpdateTestTransactionDet(TestTransactionDet instance);
    partial void DeleteTestTransactionDet(TestTransactionDet instance);
    partial void InsertTestMaster(TestMaster instance);
    partial void UpdateTestMaster(TestMaster instance);
    partial void DeleteTestMaster(TestMaster instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DB_LabConnectionString2"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TestTransactionDet> TestTransactionDets
		{
			get
			{
				return this.GetTable<TestTransactionDet>();
			}
		}
		
		public System.Data.Linq.Table<TestMaster> TestMasters
		{
			get
			{
				return this.GetTable<TestMaster>();
			}
		}
	}
	
	[Table(Name="dbo.TestTransactionDet")]
	public partial class TestTransactionDet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _TestTransactionDetPK;
		
		private decimal _TestTransactionMasterFK;
		
		private decimal _TestMasterFK;
		
		private decimal _Amount;
		
		private EntityRef<TestMaster> _TestMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestTransactionDetPKChanging(decimal value);
    partial void OnTestTransactionDetPKChanged();
    partial void OnTestTransactionMasterFKChanging(decimal value);
    partial void OnTestTransactionMasterFKChanged();
    partial void OnTestMasterFKChanging(decimal value);
    partial void OnTestMasterFKChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public TestTransactionDet()
		{
			this._TestMaster = default(EntityRef<TestMaster>);
			OnCreated();
		}
		
		[Column(Storage="_TestTransactionDetPK", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal TestTransactionDetPK
		{
			get
			{
				return this._TestTransactionDetPK;
			}
			set
			{
				if ((this._TestTransactionDetPK != value))
				{
					this.OnTestTransactionDetPKChanging(value);
					this.SendPropertyChanging();
					this._TestTransactionDetPK = value;
					this.SendPropertyChanged("TestTransactionDetPK");
					this.OnTestTransactionDetPKChanged();
				}
			}
		}
		
		[Column(Storage="_TestTransactionMasterFK", DbType="Decimal(18,0) NOT NULL")]
		public decimal TestTransactionMasterFK
		{
			get
			{
				return this._TestTransactionMasterFK;
			}
			set
			{
				if ((this._TestTransactionMasterFK != value))
				{
					this.OnTestTransactionMasterFKChanging(value);
					this.SendPropertyChanging();
					this._TestTransactionMasterFK = value;
					this.SendPropertyChanged("TestTransactionMasterFK");
					this.OnTestTransactionMasterFKChanged();
				}
			}
		}
		
		[Column(Storage="_TestMasterFK", DbType="Decimal(18,0) NOT NULL")]
		public decimal TestMasterFK
		{
			get
			{
				return this._TestMasterFK;
			}
			set
			{
				if ((this._TestMasterFK != value))
				{
					if (this._TestMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestMasterFKChanging(value);
					this.SendPropertyChanging();
					this._TestMasterFK = value;
					this.SendPropertyChanged("TestMasterFK");
					this.OnTestMasterFKChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Association(Name="TestMaster_TestTransactionDet", Storage="_TestMaster", ThisKey="TestMasterFK", IsForeignKey=true)]
		public TestMaster TestMaster
		{
			get
			{
				return this._TestMaster.Entity;
			}
			set
			{
				TestMaster previousValue = this._TestMaster.Entity;
				if (((previousValue != value) 
							|| (this._TestMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestMaster.Entity = null;
						previousValue.TestTransactionDets.Remove(this);
					}
					this._TestMaster.Entity = value;
					if ((value != null))
					{
						value.TestTransactionDets.Add(this);
						this._TestMasterFK = value.TestMasterPK;
					}
					else
					{
						this._TestMasterFK = default(decimal);
					}
					this.SendPropertyChanged("TestMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TestMaster")]
	public partial class TestMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _TestMasterPK;
		
		private string _TestCode;
		
		private string _TestName;
		
		private decimal _DepartmentMasterFK;
		
		private decimal _Rate;
		
		private EntitySet<TestTransactionDet> _TestTransactionDets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestMasterPKChanging(decimal value);
    partial void OnTestMasterPKChanged();
    partial void OnTestCodeChanging(string value);
    partial void OnTestCodeChanged();
    partial void OnTestNameChanging(string value);
    partial void OnTestNameChanged();
    partial void OnDepartmentMasterFKChanging(decimal value);
    partial void OnDepartmentMasterFKChanged();
    partial void OnRateChanging(decimal value);
    partial void OnRateChanged();
    #endregion
		
		public TestMaster()
		{
			this._TestTransactionDets = new EntitySet<TestTransactionDet>(new Action<TestTransactionDet>(this.attach_TestTransactionDets), new Action<TestTransactionDet>(this.detach_TestTransactionDets));
			OnCreated();
		}
		
		[Column(Storage="_TestMasterPK", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal TestMasterPK
		{
			get
			{
				return this._TestMasterPK;
			}
			set
			{
				if ((this._TestMasterPK != value))
				{
					this.OnTestMasterPKChanging(value);
					this.SendPropertyChanging();
					this._TestMasterPK = value;
					this.SendPropertyChanged("TestMasterPK");
					this.OnTestMasterPKChanged();
				}
			}
		}
		
		[Column(Storage="_TestCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string TestCode
		{
			get
			{
				return this._TestCode;
			}
			set
			{
				if ((this._TestCode != value))
				{
					this.OnTestCodeChanging(value);
					this.SendPropertyChanging();
					this._TestCode = value;
					this.SendPropertyChanged("TestCode");
					this.OnTestCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TestName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TestName
		{
			get
			{
				return this._TestName;
			}
			set
			{
				if ((this._TestName != value))
				{
					this.OnTestNameChanging(value);
					this.SendPropertyChanging();
					this._TestName = value;
					this.SendPropertyChanged("TestName");
					this.OnTestNameChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentMasterFK", DbType="Decimal(18,0) NOT NULL")]
		public decimal DepartmentMasterFK
		{
			get
			{
				return this._DepartmentMasterFK;
			}
			set
			{
				if ((this._DepartmentMasterFK != value))
				{
					this.OnDepartmentMasterFKChanging(value);
					this.SendPropertyChanging();
					this._DepartmentMasterFK = value;
					this.SendPropertyChanged("DepartmentMasterFK");
					this.OnDepartmentMasterFKChanged();
				}
			}
		}
		
		[Column(Storage="_Rate", DbType="Decimal(18,2) NOT NULL")]
		public decimal Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[Association(Name="TestMaster_TestTransactionDet", Storage="_TestTransactionDets", OtherKey="TestMasterFK")]
		public EntitySet<TestTransactionDet> TestTransactionDets
		{
			get
			{
				return this._TestTransactionDets;
			}
			set
			{
				this._TestTransactionDets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestTransactionDets(TestTransactionDet entity)
		{
			this.SendPropertyChanging();
			entity.TestMaster = this;
		}
		
		private void detach_TestTransactionDets(TestTransactionDet entity)
		{
			this.SendPropertyChanging();
			entity.TestMaster = null;
		}
	}
}
#pragma warning restore 1591
